{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","console","log","tempNewTweets","unshift","content","likes","id","ref","required","type","name","TweetsList","Tweet","tweet","ActionBtn","action","display","setLikes","userLike","setUserLike","actionDisplay","onClick","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","loadTweets","finalTweetsInit","alert","map","item","index","key","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a531c711.chunk.js","sourcesContent":["import React,  {useEffect, useState}  from 'react'\nimport {loadTweets} from '../lookup/index'\n\nexport function TweetComponent(props){\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    console.log(newVal)\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id: 12313,\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = \"\"\n  }\n\n\n  return <div className = {props.className}>\n    <div className = 'col-12 mb-3'>\n\n    \n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} required={true} className='form-control'>\n\n        </textarea>\n        <button type = 'submit' className = 'btn brn-primary my-3' name='tweet'> Tweet </button>\n      </form>\n    </div>\n    <TweetsList newTweets={newTweets}/>\n  </div>\n}\n\n\n\nexport function Tweet(props){\n    const {tweet} = props\n    const className = props.className ? props.className : 'btn btn-group'\n    return <div className={className}>\n      <p>{tweet.id}-{tweet.content}</p>\n      <div className={className}>\n        <ActionBtn tweet={tweet} action= {{type:'like', display:\"Likes\"}}/>\n        <ActionBtn tweet={tweet} action= {{type:'unlike', display:\"Unlike\"}}/>\n        <ActionBtn tweet={tweet} action= {{type:'retweet', display:\"Retweet\"}}/>\n\n      </div>\n    </div>\n  }\n  \n  \n  \nexport function ActionBtn(props){\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes :0)\n    // const [justClicked, setJustClicked] = useState(false)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false )\n\n    const className=props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    // const display = action.type === 'like' ? `${tweet.likes} ${actionDisplay}` : `${actionDisplay}`\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like'){\n        if (userLike === true){\n          setLikes(likes - 1)\n          setUserLike(false)\n        }else{\n          setLikes(likes + 1)\n          setUserLike(true)\n        }\n        \n      }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: `${actionDisplay}`\n    return <button className ={className} onClick={handleClick}>{display} </button> \n}\n\n\n\n\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\n    const [tweets, setTweets] = useState([])\n    // console.log(props.newTweets)\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\n\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length){\n        setTweets(final)\n      }     \n    }, [tweetsInit, tweets, props.newTweets])\n\n\n    useEffect(() => {\n      const myCallback= (response, status) => {\n        console.log(\"this nigger\",response,status)\n        if (status===200){\n          const finalTweetsInit = [...response].concat(tweetsInit)\n          setTweetsInit(finalTweetsInit)\n        }else{\n          alert('there was an error')\n        }\n      }\n      loadTweets(myCallback)\n    }, [tweetsInit])\n  \n    return tweets.map((item,index) => {\n      return <Tweet tweet = {item} key={index} className ='my-5 py-5 border bg-white text-dark'/>\n    })\n}\n  \n  \n  ","// import React from 'react'\n\nexport function loadTweets(callback){\n\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' \n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = 'json'\n  \n    xhr.responseType = responseType\n    xhr.open(method,url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = (event) => {\n      console.log(event)\n      callback({'message':\"request was an error\"},400)\n    }\n    xhr.send()\n  \n  }","import React from 'react';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div className='App-header'>\n        <h2> welcome to react </h2>\n          <h1> \n              <TweetComponent />\n          </h1>\n      </div>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(<TweetComponent />, tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}