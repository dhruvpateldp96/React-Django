{"version":3,"sources":["lookup/components.js","tweets/create.js","tweets/lookup.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","console","log","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","event","send","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","preventDefault","newVal","current","value","content","ref","required","type","ActionBtn","tweet","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","tweetId","id","apitweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","href","TweetsList","newTweets","tweetsInit","setTweetsInit","tweets","setTweets","tweetDidSet","setTweetDidSet","useEffect","final","concat","username","apitweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apitweetDetail","App","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7f756a38.chunk.js","sourcesContent":["\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n\n\n\nexport function backendLookup(method, endpoint, callback, data){\n  let jsonData;\n  if (data){\n    jsonData = JSON.stringify(data)\n  }\n  console.log('stringification', data)\n\n  const xhr = new XMLHttpRequest()\n    // const method = 'GET' \n    const url = `http://localhost:8000/api${endpoint}/`\n    // const responseType = 'json'\n  \n    xhr.responseType = 'json'\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method,url)    \n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n    \n    if (csrftoken){\n\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\",csrftoken)}\n\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = (event) => {\n      console.log(event)\n      callback({'message':\"request was an error\"},400)\n    }\n\n    xhr.send(jsonData)\n}\n\n","import React from 'react'\nimport {apitweetCreate} from './lookup'\n\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n    const handleBackendUpdate = (response, status) =>{\n      console.log(response,status)\n      if (status === 201){\n        didTweet(response)\n      } else {\n        console.log(response)\n        alert(\"An error occured please try again\")\n      }\n    }\n\n    const handleSubmit = (event) => {\n      event.preventDefault()\n      const newVal = textAreaRef.current.value\n      // backend api request\n      apitweetCreate(newVal, handleBackendUpdate)\n      textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n          <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n  </div>\n}\n","\nimport {backendLookup} from '../lookup'\n\nexport function apitweetCreate(newTweet, callback){\n    backendLookup(\"POST\",\"/tweets/create\",callback, {content: newTweet})\n}\n\nexport function apitweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\",\"/tweets/action\",callback, data)\n}\n\nexport function apitweetList(username, callback){\n    let endpoint = \"/tweets\"\n    if (username){\n        endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\n\nexport function apitweetDetail(tweetId, callback){\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\n}","import {apitweetAction } from './lookup'\nimport React from 'react';\n\nexport function ActionBtn(props){\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes :0\n    // const [likes, setLikes] = useState(tweet.likes ? tweet.likes :0)\n    // const [justClicked, setJustClicked] = useState(false)\n    // const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false )\n\n    const className=props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    // const display = action.type === 'like' ? `${tweet.likes} ${actionDisplay}` : `${actionDisplay}`\n    const handleActionBackendEvent = (response, status) =>{\n      console.log(response, status)\n      if ((status === 200 || status === 201) && didPerformAction){\n\n        didPerformAction(response,status)\n      }\n\n   }\n    \n    const handleClick = (event) => {\n      event.preventDefault()\n      apitweetAction(tweet.id, action.type, handleActionBackendEvent)\n     \n        \n      }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: `${actionDisplay}`\n    return <button className ={className} onClick={handleClick}>{display} </button> \n}","import React, { useState } from 'react';\nimport { ActionBtn } from './buttons';\n\nexport function ParentTweet(props) {\n  const { tweet } = props;\n  return tweet.parent ? <div className='row'>\n    <div className='col-11 mx-auto p-3 border rounded'>\n      <p className='mb-0 text-muted small'> Retweet </p>\n      <Tweet className={''} hideActions tweet={tweet.parent}></Tweet>\n    </div>\n  </div> : null;\n}\nexport function Tweet(props) {\n  // console.log(\"sex chade\", props.tweet[0].content)\n  const { tweet, didRetweet, hideActions } = props;\n  // const {tweet} = props\n  const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\n  const className = props.className ? props.className : 'col-10 mx-auto';\n  \n\n  const path = window.location.pathname\n  var match = path.match(/(?<tweetid>\\d+)/)\n  var urlTweetId = match ? match.groups.tweetid : -1\n  const isDetail = `${tweet.id}` === `${urlTweetId}`\n  \n\n  if (match){\n\n  }\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet);\n    }\n    else if (status === 201) {\n      //let the tweelist know\n      if (didRetweet) {\n        didRetweet(newActionTweet);\n      }\n    }\n  };\n\n  const handleLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/${tweet.id}`\n  }\n  return <div className={className}>\n    <div>\n      <p>{tweet.id}-{tweet.content}</p>\n      <ParentTweet tweet={tweet} />\n    </div>\n\n    <div className='btn btn-group'>\n    {(actionTweet && hideActions !== true) && <React.Fragment>\n      <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'like', display: \"Likes\" }} />\n      <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'unlike', display: \"Unlike\" }} />\n      <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'retweet', display: \"Retweet\" }} />\n      </React.Fragment>}\n      {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick = {handleLink}> View</button>}\n    </div>\n  </div>;\n}\n","import React, { useEffect, useState } from 'react';\nimport { apitweetList } from './lookup';\nimport { Tweet } from \"./detail\";\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : []);\n  const [tweets, setTweets] = useState([]);\n  const [tweetDidSet, setTweetDidSet] = useState(false);\n  // console.log(props.newTweets)\n  // setTweetsInit([...props.newTweets].concat(tweetsInit))\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [tweetsInit, tweets, props.newTweets]);\n  useEffect(() => {\n    if (tweetDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        // console.log(\"this nigger\",response,status)\n        if (status === 200) {\n          // const finalTweetsInit = [...response].concat(tweetsInit)\n          // setTweetsInit(finalTweetsInit)\n          setTweetsInit(response);\n          setTweetDidSet(true);\n        }\n        else {\n          alert('there was an error');\n        }\n      };\n      apitweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetDidSet, setTweetDidSet, props.username]);\n  const handleDidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(newTweet);\n    setTweets(updateFinalTweets);\n  };\n  return tweets.map((item, index) => {\n    return <Tweet \n    tweet={item}\n     didRetweet={handleDidRetweet} \n     key={`${index}-{item.id}`} \n     className='my-5 py-5 border bg-white text-dark' />;\n  });\n}\n","import React, {useEffect, useState}  from 'react'\n\nimport {TweetCreate} from './create'\nimport {TweetsList} from './list'\nimport {apitweetDetail} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) =>{\n      let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)\n      setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\nexport function TweetDetailComponent(props){\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n  // console.log(\"yolo\",props,tweetId)\n\n  const handleBackendLookup = (response, status) => {\n    console.log(response)\n    if (status === 200){\n      setTweet(response)\n    }else{\n      alert(\"there was an error finding your tweet\")\n    }\n  }\n\n  useEffect(() => {\n    if (didLookup === false){\n      apitweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n      \n    }\n\n  }, [tweetId,didLookup, setDidLookup])\n  // console.log(tweet)\n\n  \n  return tweet === null ? null : tweet.map((item, index) => {\n    return <Tweet \n    tweet={item}\n     key={`${index}-{item.id}`} \n     className='my-5 py-5 border bg-white text-dark' />;\n  })\n\n\n\n  // return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","import React from 'react';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div className='App-header'>\n        <h2> welcome to react </h2>\n          <h1> \n              <TweetComponent />\n          </h1>\n      </div>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\n\nconst event = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl){\n  ReactDOM.render(event(TweetComponent,tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    event(TweetDetailComponent, container.dataset),container);\n  \n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}